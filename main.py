import aiohttp
from aiogram import Bot, Dispatcher, Router, types

bot = Bot("6119150508:AAGtxN5ZIJCpFJvDcZA0narLW6Ysst0o20Q", parse_mode="HTML")
from geopy import Nominatim

decoder = Nominatim(user_agent="wttrinbot_telegram")
router = Router()

session = None

@router.inline_query()
async def wttr(query: types.InlineQuery):
    global session
    if not session:
        session = aiohttp.ClientSession()
    place = query.query
    if place == "":
        return query.answer(
            [
                types.InlineQueryResultArticle(
                    id="1",
                    title="—Ö–∑ –∫–∞–∫–æ–π —Ç–µ–±–µ –≥–æ—Ä–æ–¥ –Ω–∞–¥–æ",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"—Ç—ã –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–ª ALOOOOüîâüîâüîâüîâüîâüîâüîâ"
                    ),
                )
            ],
            cache_time=0,
            is_personal=True,
        )
    place_coords = decoder.geocode(place)
    try:
        lat = place_coords.latitude
        lon = place_coords.longitude
    except:
        return query.answer(
            [
                types.InlineQueryResultArticle(
                    id="1",
                    title="–Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ :(((((((",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"–Ω–µ –Ω–∞—à—ë–ª –º–µ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º"
                    ),
                )
            ],
            cache_time=0,
            is_personal=True,
        )
    async with session.get(
        f"https://api.met.no/weatherapi/locationforecast/2.0/compact?lat={lat}&lon={lon}"
    ) as req:
        json = await req.json()
        print(type(json), json["properties"]["timeseries"][0]["data"])
        info = json["properties"]["timeseries"][0]["data"]["instant"]["details"]
        air_pressure = f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {info['air_pressure_at_sea_level']} –≥–ü–∞"
        temp = f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {info['air_temperature']} ¬∞{'C' if json['properties']['meta']['units']['air_temperature'] == 'celsius' else 'F'}"
        cloudy = f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {info['cloud_area_fraction']}%"
        visibility = f"<b>–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {info['relative_humidity']}%"
        wind_speed = f"<b>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:</b> {info['wind_speed']} –º/—Å"
        print(place_coords)
        await query.answer(
            [
                types.InlineQueryResultArticle(
                    id="1",
                    title=f"–° –∏–º–µ–Ω–µ–º –ª–æ–∫–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ {place_coords.address.split(',', maxsplit=1)[0][:20]}",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"<b>{place_coords.address.split(',', maxsplit=1)[0].replace('–•–æ—Ö–ª—ã', '–•–æ–ª–º—ã')}</b>\n{air_pressure}\n{temp}\n{cloudy}\n{visibility}\n{wind_speed}"
                    ),
                ),
                types.InlineQueryResultArticle(
                    id="2",
                    title=f"–° –∏–º–µ–Ω–µ–º –ª–æ–∫–∞—Ü–∏–∏—Ñ —Ñ—É–ª–ª {place_coords.address}",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"<b>{place_coords.address.replace('–•–æ—Ö–ª—ã', '–•–æ–ª–º—ã')}</b>\n{air_pressure}\n{temp}\n{cloudy}\n{visibility}\n{wind_speed}"
                    ),
                ),
                types.InlineQueryResultArticle(
                    id="3",
                    title="–ë–µ–∑ –∏–º–µ–Ω–∏ –ª–æ–∫–∞—Ü–∏–∏ (–∞–Ω–∞–Ω–∏–º–Ω–∞—Å—Ç)",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"{air_pressure}\n{temp}\n{cloudy}\n{visibility}\n{wind_speed}"
                    ),
                ),
            ],
            cache_time=0,
            is_personal=True,
        )


async def main():
    session = aiohttp.ClientSession()
    dp = Dispatcher()
    dp.include_router(router)
    try:
        await dp.start_polling(bot)
    finally:
        await session.close()


import asyncio

asyncio.run(main())
asyncio.run(session.close())
